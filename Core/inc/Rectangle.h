/////////////////////////////////////////////////////////////
/** @file Rectangle.h
 *  @ingroup Utils
 *
 *  @author Luk2010
 *  @version 0.1A
 *
 *  @date 26/09/2012 - 22/04/2014
 *
 *  Defines the Rectangle class.
 *
**/
/////////////////////////////////////////////////////////////
#ifndef APRORECTANGLE_H
#define APRORECTANGLE_H

#include "Platform.h"
#include "Vector2.h"
#include "Maths.h"

namespace APro
{
    /////////////////////////////////////////////////////////////
    /** @class Rectangle
     *  @ingroup Utils
     *  @brief A 2D Rectangle utility class.
    **/
    /////////////////////////////////////////////////////////////
    class Rectangle
    {
    public:

        Vector2 origin; ///< Holds the top - left point.
        Vector2 end;    ///< Holds the bottom - right point.

    public:

        /////////////////////////////////////////////////////////////
        /** @brief Constructs an empty Rectangle.
        **/
        /////////////////////////////////////////////////////////////
        Rectangle();

        /////////////////////////////////////////////////////////////
        /** @brief Constructs a copy of another Rectangle.
        **/
        /////////////////////////////////////////////////////////////
        Rectangle(const Rectangle& other);

        /////////////////////////////////////////////////////////////
        /** @brief Constructs a Rectangle object from dimensions.
         *  @param start : Top - left point of the Rectangle object.
         *  @param dimension : Width and height of the Rectangle.
        **/
        /////////////////////////////////////////////////////////////
        Rectangle(const Vector2& start, const Vector2& dimension);

        /////////////////////////////////////////////////////////////
        /** @brief Constructs a Rectangle object from dimensions.
        **/
        /////////////////////////////////////////////////////////////
        Rectangle(Real left, Real top, Real width, Real height);

        /////////////////////////////////////////////////////////////
        /** @brief Destructs the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        ~Rectangle();

    public:

        /////////////////////////////////////////////////////////////
        /** @brief Set dimensions of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        void set(Real Left, Real Top, Real Width, Real Height);

        /////////////////////////////////////////////////////////////
        /** @brief Set dimensions of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        void set(const Vector2& start, const Vector2& dimension);

        /////////////////////////////////////////////////////////////
        /** @brief Set dimensions of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        void set(const Rectangle& other);

    public:

        /////////////////////////////////////////////////////////////
        /** @brief Returns Left coordinate.
        **/
        /////////////////////////////////////////////////////////////
        inline Real getLeft() const { return origin.x; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Right coordinate.
        **/
        /////////////////////////////////////////////////////////////
        inline Real getRight() const { return end.x; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Top coordinate.
        **/
        /////////////////////////////////////////////////////////////
        inline Real getTop() const { return origin.y; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Bottom coordinate.
        **/
        /////////////////////////////////////////////////////////////
        inline Real bottom() const { return end.y; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Width of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        inline Real getWidth() const { return end.y - origin.y; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Height of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        inline Real getHeight() const { return end.x - origin.x; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Size (Width,Height) of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        inline Vector2 getSize() const { return end - origin; }

        /////////////////////////////////////////////////////////////
        /** @brief Returns Surface of the Rectangle object.
        **/
        /////////////////////////////////////////////////////////////
        Real getSurface() const;

        /////////////////////////////////////////////////////////////
        /** @brief Returns true if given 2d point is inside Rectangle.
        **/
        /////////////////////////////////////////////////////////////
        bool isInside(const Vector2& pt) const;

        /////////////////////////////////////////////////////////////
        /** @brief Tells if point is inside or outside this Rectangle.
        **/
        /////////////////////////////////////////////////////////////
        Intersection intersects(const Vector2& pt) const;

        /////////////////////////////////////////////////////////////
        /** @brief Returns the Intersected Rectangle between this one
         *  and given one.
         *
         *  If no intersection is found, an unvalid rectangle is returned.
        **/
        /////////////////////////////////////////////////////////////
        Rectangle getIntersection(const Rectangle& rhs) const;

        /////////////////////////////////////////////////////////////
        /** @brief Return true if Rectangle is valid.
        **/
        /////////////////////////////////////////////////////////////
        bool isValid() const;

        /////////////////////////////////////////////////////////////
        /** @brief Return the Intersection type between this Rectangle
         *  and given one.
        **/
        /////////////////////////////////////////////////////////////
        Intersection intersects(const Rectangle& rect) const;

        bool operator == (const Rectangle& other) const;
        bool operator != (const Rectangle& other) const;
    };
}

#endif
